#include <fx.h>
#include <ice2k/comctl32.h>
#include <ice2k/branding.h>
#include "res/foxres.h"

#include <stdio.h>
#include <string.h>
#include <cpuid.h>
#include <sys/sysinfo.h>
#include <stdint.h>
#include <locale.h>
#include <unistd.h>
#include <limits.h>

#include <ifaddrs.h>
#include <net/if.h>
#include <netdb.h>
#include <errno.h>


#include <sys/types.h>
#include <pwd.h>
#include <ctype.h>

FXMainWindow* sysdmwin;


int getIPAddress(char* str) // taken from hostname utility, slightly modified
{                           // only returns 1 ipv4 address
	struct ifaddrs *ifa, *ifap;
	//char *p;
	char buf[NI_MAXHOST];
	int flags, ret, family, addrlen;

	flags = NI_NUMERICHOST;

	if (getifaddrs(&ifa) != 0) {
		fprintf(stderr, "%s", strerror(errno));
		return errno;
	}

	for (ifap = ifa; ifap != NULL; ifap = ifap->ifa_next) {
		/* Skip interfaces that have no configured addresses */
		if (ifap->ifa_addr == NULL)
			continue;

		/* Skip the loopback interface */
		if (ifap->ifa_flags & IFF_LOOPBACK)
			continue;

		/* Skip interfaces that are not UP */
		if (!(ifap->ifa_flags & IFF_UP))
			continue;

		/* Only handle IPv4 addresses */
		family = ifap->ifa_addr->sa_family;
		if (family != AF_INET)
			continue;

		addrlen = (family == AF_INET) ? sizeof(struct sockaddr_in) :
		                                sizeof(struct sockaddr_in6);

		ret = getnameinfo(ifap->ifa_addr, addrlen,
		                  buf, sizeof(buf), NULL, 0, flags);

		/* Just skip addresses that cannot be translated */
		if (ret != 0) {
			if (ret != EAI_NONAME) {
				fprintf(stderr, "%s", gai_strerror(ret));
				return ret;
			}
		} else {
			strcpy(str, buf);
			break;
		}
	}
	freeifaddrs(ifa);
	return 0;
}

// thank you https://en.wikipedia.org/wiki/CPUID#EAX=8000'0002h,8000'0003h,8000'0004h:_Processor_Brand_String
int getCpuString(char* output) {
  #ifdef __x86_64__
    #define _CPUID
  #endif

  #ifdef __i386__
    #define _CPUID
  #endif

  #ifdef _CPUID
    unsigned int regs[12];      // i know i can use the linux apis for this...
                                // but that's boring and i want to have fun :P
    __cpuid(0x80000000, regs[0], regs[1], regs[2], regs[3]);

    if (regs[0] < 0x80000004)
      return 1;

    __cpuid(0x80000002, regs[0], regs[1], regs[2], regs[3]);
    __cpuid(0x80000003, regs[4], regs[5], regs[6], regs[7]);
    __cpuid(0x80000004, regs[8], regs[9], regs[10], regs[11]);

    memcpy(output, regs, sizeof(regs));
    output[sizeof(regs)] = '\0';

    return 0;
  #else
    return 1;
  #endif
}

// https://stackoverflow.com/questions/22582989/word-wrap-program-c
inline int wordlen(const char * str){
  int tempindex=0;
  while (str[tempindex]!=' ' && str[tempindex]!=0 && str[tempindex]!='\n') {
    ++tempindex;
  }
  return(tempindex);
}

void wrap(char * s, const int wrapline){
  int index = 0;
  int curlinelen = 0;
  
  while (s[index] != '\0') {
    if (s[index] == '\n')
      curlinelen = 0;

    else if (s[index] == ' ') {
      if (curlinelen+wordlen(&s[index+1]) >= wrapline) {
        s[index] = '\n';
        curlinelen = 0;
      }
    }

    curlinelen++;
    index++;
  }
}

void formatnum(long unsigned num, char *buffer) { // from ice2kver
  char temp[1024];
  sprintf(temp, "%lu", num / 1024);

  int len = strlen(temp);
  int commas = (len - 1) / 3;
  int new_len = len + commas;

  buffer[new_len] = '\0';
  int i = len - 1, j = new_len - 1;

  int count = 0;
  while (i >= 0) {
    if (count == 3) {
      buffer[j--] = ',';
      count = 0;
    }
    buffer[j--] = temp[i--];
    count++;
  }
}


class ChangeHostnameBox : public FXDialogBox {
	FXDECLARE(ChangeHostnameBox)

	private:
		// Controls
		FXHorizontalFrame *cont;                 // Container

		FXLabel           *icon;                 // About icon
		FXLabel           *text;                 // About text

		FXButton          *okbtn;                // OK button
		FXButton          *cancelbtn;            // Cancel button
								     //
		FXTextField       *compfield;

	protected:
		ChangeHostnameBox() {}

public:

  // Message handlers
  long onSetFocus(FXObject*,FXSelector,void*);


public:

  // Messages for our class
  enum {
    ID_MAINWIN=FXMainWindow::ID_LAST,
    ID_SETFOCUS_T
  };

	public:

		// ChangeHostnameBox's constructor
		ChangeHostnameBox(FXWindow* owner);

		// Initialize
		virtual void create();

		virtual ~ChangeHostnameBox();
};



// Change computer name window
FXDEFMAP(ChangeHostnameBox) ChangeHostnameBoxMap[] = {
  FXMAPFUNC(SEL_TIMEOUT, ChangeHostnameBox::ID_SETFOCUS_T, ChangeHostnameBox::onSetFocus),
};

FXIMPLEMENT(ChangeHostnameBox,FXDialogBox,ChangeHostnameBoxMap,ARRAYNUMBER(ChangeHostnameBoxMap))


long ChangeHostnameBox::onSetFocus(FXObject* sender, FXSelector sel, void* ptr) {
  this->setFocus();
  //puts("a");
  return 1;
}



ChangeHostnameBox::ChangeHostnameBox(FXWindow* owner):

FXDialogBox(owner, "Identification Changes", DECOR_TITLE|DECOR_BORDER|DECOR_CLOSE|DECOR_MENU, 0, 0, 0, 0,
                                  11, 12, 11, 11, 0, 0) {
	new FXLabel(this, "You can change the name of this computer. You must install", NULL, LABEL_NORMAL|JUSTIFY_LEFT, 0,0,0,0,  1,0,0,-1);
	new FXLabel(this, "networking before you can change this computer's domain", NULL, LABEL_NORMAL|JUSTIFY_LEFT, 0,0,0,0,  1,0,0,-1);
	new FXLabel(this, "membership.", NULL, LABEL_NORMAL|JUSTIFY_LEFT, 0,0,0,0,  1,0,0,0);
	new FXSeparator(this, SEPARATOR_NONE|LAYOUT_FIX_HEIGHT, 0,0,0,19);

	char hostname[HOST_NAME_MAX+1];
	gethostname(hostname, HOST_NAME_MAX+1);

	new FXLabel(this, "&Computer name:", NULL, LABEL_NORMAL|JUSTIFY_LEFT, 0,0,0,0,  1,0,0,2);

	compfield = new FXTextField(this, 49,NULL,0,FRAME_SUNKEN|FRAME_THICK);
	//compfield->setFocus();

	compfield->setText(hostname);
	compfield->selectAll();

	new FXSeparator(this, SEPARATOR_NONE|LAYOUT_FIX_HEIGHT, 0,0,0,86); // why so much whitespace?
												 //
	FXGroupBox* membergrp = new FXGroupBox(this, "Member of", FRAME_THICK|LAYOUT_FILL_X, 0,0,0,0, 12,12,2,12);
	FXRadioButton* domainrad = new FXRadioButton(membergrp, "&Domain:", NULL, 0, RADIOBUTTON_NORMAL, 0,0,0,0,  2,0,2,0);
	domainrad->disable();
	FXTextField* domaintxt = new FXTextField(membergrp, 41, NULL, 0, LAYOUT_FIX_X|TEXTFIELD_NORMAL, 31,0,0,0,  2,2,2,1);
	domaintxt->disable();
	FXRadioButton* workgrad = new FXRadioButton(membergrp, "&Workgroup:", NULL, 0, RADIOBUTTON_NORMAL, 0,0,0,0,  2,0,4,0);
	workgrad->setCheck(TRUE);
	workgrad->disable();
	FXTextField* worktxt = new FXTextField(membergrp, 41, NULL, 0, LAYOUT_FIX_X|TEXTFIELD_NORMAL, 31,0,0,0,  2,2,2,1);
	worktxt->setText("WORKGROUP");
	worktxt->setTextColor(getApp()->getShadowColor());
	worktxt->disable();
	membergrp->disable();


	new FXSeparator(this, SEPARATOR_NONE|LAYOUT_FIX_HEIGHT, 0,0,0,9);

	//membergrp->disable();

	FXHorizontalFrame* btncont = new FXHorizontalFrame(this, LAYOUT_RIGHT, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0);

	okbtn = new FXButton(btncont, "OK", NULL, this, ID_ACCEPT,
	BUTTON_DEFAULT|BUTTON_INITIAL|FRAME_THICK|FRAME_RAISED|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT,
	0, 0, 75, 23, 3, 3, 2, 3);

	cancelbtn = new FXButton(btncont, "Cancel", NULL, this, ID_CANCEL,
	BUTTON_DEFAULT|FRAME_THICK|FRAME_RAISED|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT,
	0, 0, 75, 23, 3, 3, 2, 3);
  getApp()->addTimeout(this,ChangeHostnameBox::ID_SETFOCUS_T,10); // hacky but only reliable way i found to do it...

	//okbtn->setFocus();
}


ChangeHostnameBox::~ChangeHostnameBox() {
}

void ChangeHostnameBox::create() {
	FXDialogBox::create();
	compfield->setFocus();
}



// Main Window
class SystemPropertiesWindow : public FXMainWindow {

  // Macro for class hierarchy declarations
  FXDECLARE(SystemPropertiesWindow)

private:
  FXVerticalFrame*          generalframe;
  FXVerticalFrame*          networkframe;
  FXVerticalFrame*          hardwareframe;
  FXVerticalFrame*          userframe;
  FXVerticalFrame*          advframe;

  FXHorizontalFrame*        btncont;
  FXTabBook*                tabbook;
  FXButton*                 okbtn;
  FXButton*                 cancelbtn;
  FXButton*                 applybtn;

  FXHorizontalFrame*        horcont;
  FXVerticalFrame*          vercont;



protected:
  SystemPropertiesWindow(){}

public:

  // Message handlers
  long onAccept(FXObject*,FXSelector,void*);
  long onChangeHostname(FXObject*,FXSelector,void*);
  long onCmdEnvVars(FXObject*,FXSelector,void*);
  long onCmdNtldr(FXObject*,FXSelector,void*);
  long onSetFocus(FXObject*,FXSelector,void*);
  long onUnFocus(FXObject*,FXSelector,void*);


public:

  // Messages for our class
  enum {
    ID_MAINWIN=FXMainWindow::ID_LAST,
    ID_CHANGEHOSTNAME,
    ID_ACCEPT,
    ID_CANCEL,
    ID_ENVVARS,
    ID_NTLDR,
    ID_SETFOCUS_T,
    ID_UNFOCUS_T
  };

public:

  // CtrlAltDelWindow's constructor
  SystemPropertiesWindow(FXApp* a);

  // Initialize
  virtual void create();

  virtual ~SystemPropertiesWindow();
};

FXDEFMAP(SystemPropertiesWindow) SystemPropertiesWindowMap[] = {
  FXMAPFUNC(SEL_COMMAND, SystemPropertiesWindow::ID_ACCEPT, SystemPropertiesWindow::onAccept),
  FXMAPFUNC(SEL_COMMAND, SystemPropertiesWindow::ID_CANCEL, SystemPropertiesWindow::onAccept),
  FXMAPFUNC(SEL_COMMAND, SystemPropertiesWindow::ID_CHANGEHOSTNAME, SystemPropertiesWindow::onChangeHostname),
  FXMAPFUNC(SEL_COMMAND, SystemPropertiesWindow::ID_ENVVARS, SystemPropertiesWindow::onCmdEnvVars),
  FXMAPFUNC(SEL_COMMAND, SystemPropertiesWindow::ID_NTLDR, SystemPropertiesWindow::onCmdNtldr),

  FXMAPFUNC(SEL_TIMEOUT, SystemPropertiesWindow::ID_SETFOCUS_T, SystemPropertiesWindow::onSetFocus),
  FXMAPFUNC(SEL_TIMEOUT, SystemPropertiesWindow::ID_UNFOCUS_T, SystemPropertiesWindow::onUnFocus),
};

FXIMPLEMENT(SystemPropertiesWindow,FXMainWindow,SystemPropertiesWindowMap,ARRAYNUMBER(SystemPropertiesWindowMap))



SystemPropertiesWindow::~SystemPropertiesWindow() {
}

long SystemPropertiesWindow::onSetFocus(FXObject* sender, FXSelector sel, void* ptr) {
  this->killFocus();
  this->setFocus();
  puts("a");
  return 1;
}
long SystemPropertiesWindow::onUnFocus(FXObject* sender, FXSelector sel, void* ptr) {
  this->setFocus();
  //puts("a");
  return 1;
}

void SystemPropertiesWindow::create() {
  FXMainWindow::create();
}


long SystemPropertiesWindow::onAccept(FXObject* sender, FXSelector sel, void* ptr) {
  this->close();
  return 0;
}

long SystemPropertiesWindow::onCmdEnvVars(FXObject* sender, FXSelector sel, void* ptr) {


  system("xfw ~/.profile &"); // there is no good way of finding out where env vars are set on linux
  return 1;                   // and to globally set them because linux SUCKS
}

long SystemPropertiesWindow::onCmdNtldr(FXObject* sender, FXSelector sel, void* ptr) {
  if (access("/boot/extlinux/extlinux.conf", F_OK) == 0)
    system("xfw /boot/extlinux/extlinux.conf &");
  else if (access("/boot/efi/loader/loader.conf", F_OK) == 0)
    system("xfw /boot/efi/loader/loader.conf &");
  else
    system("xfw /etc/default/grub &");

  return 1;
}

long SystemPropertiesWindow::onChangeHostname(FXObject* sender, FXSelector sel, void* ptr) {
  ChangeHostnameBox* hostnamebox = new ChangeHostnameBox(sysdmwin);
  hostnamebox->execute(PLACEMENT_OWNER);
  return 1;
}


//int main(int argc, char *argv[]) {
SystemPropertiesWindow::SystemPropertiesWindow(FXApp *app):FXMainWindow(app, "System Properties", NULL, NULL, DECOR_TITLE|DECOR_BORDER|DECOR_MENU|DECOR_CLOSE, 0,0,404,436,  0,0,0,0,  0,0) {
  this->changeFocus((FXWindow*)0);
  this->killFocus();
  FXIcon* monitorimage = new FXGIFIcon(app, resico_monitor);

  //application.init(argc, argv);
  //FXDialogBox *main=new FXDialogBox(app, "System Properties", NULL, NULL, DECOR_TITLE|DECOR_BORDER|DECOR_MENU|DECOR_CLOSE|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT, 0,0,404,436,  0,0,0,0,  0,0);
  generalframe = new FXVerticalFrame(this,LAYOUT_FILL_X|LAYOUT_FILL_Y|FRAME_NONE, 0,0,0,0, 0,0,0,0, 0,0);
  tabbook = new FXTabBook(generalframe,NULL,0,LAYOUT_FILL_X|LAYOUT_FILL_Y|LAYOUT_RIGHT, 0,0,0,0, 6,6,7,6);


  btncont = new FXHorizontalFrame(generalframe, LAYOUT_RIGHT, 0, 0, 0, 0, 0, 6, 0, 7, 6, 0);

  okbtn = new FXButton(btncont, "OK", NULL, this, ID_ACCEPT, BUTTON_DEFAULT|BUTTON_NORMAL|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT, 0, 0, 75, 23, 0, 0, 0, 0);
  cancelbtn = new FXButton(btncont, "Cancel", NULL, this, ID_CANCEL, BUTTON_NORMAL|BUTTON_DEFAULT|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT, 0, 0, 75, 23, 0, 0, 0, 0);
  applybtn = new FXButton(btncont, "&Apply", NULL, this, 0, BUTTON_NORMAL|BUTTON_DEFAULT|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT, 0, 0, 75, 23, 0, 0, 0, 0);
  applybtn->disable();


  new FXTabItem(tabbook,"General",NULL,TAB_TOP_NORMAL,0,0,0,0,4,4,1,3);

  FXHorizontalFrame* horcont = new FXHorizontalFrame(tabbook,FRAME_THICK|FRAME_RAISED, 0,0,380,361, 24,24,15,16); 
  new FXLabel(horcont, "", monitorimage, LABEL_NORMAL, 0,0,0,0,  20,29,24,20);

  //new FXLabel(a, "", NULL,LAYOUT_FIX_X|LAYOUT_FIX_Y|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT, 0, 0, 380, 361);
  //new FXLabel(a, "a", NULL, LAYOUT_FILL_X|LAYOUT_FILL_Y,0, 0, 380, 361);
  //new FXLabel(a, "", monitoricon);
  vercont = new FXVerticalFrame(horcont,FRAME_NONE, 0,0,380,361, 2,2,2,2);
  new FXLabel(vercont, "System:",                    NULL, LABEL_NORMAL,              0,0,0,0,   0,0, 0,0);
  new FXLabel(vercont,    i2kBGetFullOSName(),       NULL, LABEL_NORMAL,              0,0,0,0,  18,0, 0,0);
  new FXLabel(vercont,    "5.00.2195",               NULL, LABEL_NORMAL,              0,0,0,0,  18,0, 0,0);
  new FXLabel(vercont,    "Service Pack 4",          NULL, LABEL_NORMAL,              0,0,0,0,  18,0, 0,0);

  new FXSeparator(vercont, SEPARATOR_NONE|LAYOUT_FIX_HEIGHT, 0,0,0,4); // i could use a fxframe, but semantics r cute

  char hostname[HOST_NAME_MAX+1];
  gethostname(hostname, HOST_NAME_MAX+1);

  new FXLabel(vercont, "Registered to:",             NULL, LABEL_NORMAL,              0,0,0,0,  0,0, 0,0);
  new FXLabel(vercont,    getlogin(),                NULL, LABEL_NORMAL,              0,0,0,0, 18,0, 0,0);
  new FXLabel(vercont,    hostname,                  NULL, LABEL_NORMAL,              0,0,0,0, 18,0, 0,0);
  new FXLabel(vercont,    "51873-016-2312562-09215", NULL, LABEL_NORMAL,              0,0,0,0, 18,0, 0,0);

  //new FXLabel(vercont, " ", NULL, LABEL_NORMAL, 0,0,0,0,          0,0, 0,0);
  new FXSeparator(vercont, SEPARATOR_NONE|LAYOUT_FIX_HEIGHT, 0,0,0,13);

  new FXLabel(vercont, "Computer:", NULL, LABEL_NORMAL, 0,0,0,0,          0,0, 0,0);
  //new FXLabel(vercont,    "Intel (R) Xeon(R) CPU", NULL, LABEL_NORMAL, 0,0,0,0,          18,0, 0,0);

  char cpubrand[49];
  if (!getCpuString(cpubrand)) {
    wrap(cpubrand, 28); //https://stackoverflow.com/questions/2351744/insert-line-breaks-in-long-string-word-wrap

    char* curLine = cpubrand;
    while (curLine) { // I LOVE STACK OVERFLOW https://stackoverflow.com/a/17983619
      char* nextLine = strchr(curLine, '\n');
      if (nextLine) *nextLine = '\0';
      new FXLabel(vercont, curLine,                  NULL, JUSTIFY_LEFT|LABEL_NORMAL, 0,0,0,0, 18,0, 0,0);    
      if (nextLine) *nextLine = '\n';
      curLine = nextLine ? (nextLine+1) : NULL;
    }
  } else {
    new FXLabel(vercont, "Unknown",                  NULL, JUSTIFY_LEFT|LABEL_NORMAL, 0,0,0,0, 18,0, 0,0); // if you are on a toy arm cpu
  }

  new FXLabel(vercont,    "AT/AT COMPATIBLE", NULL, LABEL_NORMAL, 0,0,0,0,          18,0, 0,0);

  struct sysinfo sys_info; // from my own jawn ice2kver
                           // i should have probably just used sprintf...
  if( sysinfo(&sys_info) != 0)
    perror("sysinfo");

  char physmemtext[1024];
  formatnum(sys_info.totalram, physmemtext);

  strcat(physmemtext, " KB RAM");

  new FXLabel(vercont, physmemtext, NULL, LABEL_NORMAL, 0,0,0,0,          18,0, 0,0);


  new FXTabItem(tabbook,"Network Identification",NULL,TAB_TOP_NORMAL,0,0,0,0,4,4,1,3);
  networkframe = new FXVerticalFrame(tabbook,FRAME_THICK|FRAME_RAISED|LAYOUT_FILL_X|LAYOUT_FILL_Y);

  FXIcon* computericon = new FXGIFIcon(app, resico_compuzer);

  FXHorizontalFrame* nettop = new FXHorizontalFrame(networkframe, LAYOUT_FILL_X, 0,0,0,0,   9,7,7,5,  17,16);

  new FXLabel(nettop, "", computericon, LABEL_NORMAL, 0,0,0,0,  0,0,0,0);
 
  new FXLabel(nettop, "Windows uses the following information to identify your computer\n"
		          "on the network.", NULL, LAYOUT_CENTER_Y|JUSTIFY_LEFT|LABEL_NORMAL, 0,0,0,0,  0,0,0,0);

  char hostnameup[HOST_NAME_MAX+1];

  memcpy(hostnameup, hostname, sizeof(hostnameup));

  char *upper = hostnameup;

  while (*upper) {
    *upper = toupper((unsigned char) *upper);
    upper++;
  }

  FXHorizontalFrame* compname = new FXHorizontalFrame(networkframe, LAYOUT_FILL_X, 0,0,0,0,   9,7,4,2,  0,0);
  new FXLabel(compname, "Full computer name:", NULL, JUSTIFY_LEFT|LABEL_NORMAL|LAYOUT_FIX_WIDTH,0,0,124,0, 0,0,0,0);
  new FXLabel(compname, hostnameup, NULL, LABEL_NORMAL,0,0,0,0, 0,0,0,0);

  FXHorizontalFrame* ipaddr = new FXHorizontalFrame(networkframe, LAYOUT_FILL_X, 0,0,0,0,   9,7,4,2,  0,0);
  new FXLabel(ipaddr, "IPv4 address:", NULL, JUSTIFY_LEFT|LABEL_NORMAL|LAYOUT_FIX_WIDTH,0,0,124,0, 0,0,0,0);
  char ip[16];
  if (!getIPAddress(ip)) {
    new FXLabel(ipaddr, ip, NULL, LABEL_NORMAL,0,0,0,0, 0,0,0,0);
  } else {
    new FXLabel(ipaddr, "Unknown", NULL, LABEL_NORMAL,0,0,0,0, 0,0,0,0);
  }

  FXHorizontalFrame* netidcont = new FXHorizontalFrame(networkframe, LAYOUT_FILL_X, 0,0,0,0,   9,7,15,4,  17,16);

  FXLabel* netidlbl = new FXLabel(netidcont, "To use the Network Identification Wizard to join a\n"
                         "domain and create a local user, click Network ID.",
                         NULL, JUSTIFY_LEFT|LABEL_NORMAL|LAYOUT_FIX_WIDTH, 0,0,265,0,  0,0,0,0);

  netidlbl->disable();

  FXButton* netidbtn = new FXButton(netidcont, "&Network ID", NULL, NULL, 0, BUTTON_DEFAULT|BUTTON_NORMAL|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT, 0, 0, 75, 23, 0, 0, 0, 0);  

  netidbtn->disable();

  FXHorizontalFrame* renamecont = new FXHorizontalFrame(networkframe, LAYOUT_FILL_X, 0,0,0,0,   9,7,15,4,  17,16);
  
  new FXLabel(renamecont, "To rename this computer, click Properties.",
                         NULL, JUSTIFY_LEFT|LABEL_NORMAL|LAYOUT_FIX_WIDTH, 0,0,265,0,  0,0,0,0);

  new FXButton(renamecont, "&Properties", NULL, this, ID_CHANGEHOSTNAME, BUTTON_DEFAULT|BUTTON_NORMAL|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT, 0, 0, 75, 23, 0, 0, 0, 0);  



  new FXTabItem(tabbook,"Hardware",NULL,TAB_TOP_NORMAL,0,0,0,0,4,4,1,3);
  hardwareframe = new FXVerticalFrame(tabbook,FRAME_THICK|FRAME_RAISED, 0,0,0,0, 13,12,19,8, 0,0); 

  FXButton* btn;

  FXGroupBox* hdwwizgrp = new FXGroupBox(hardwareframe, "Hardware Wizard", FRAME_THICK|LAYOUT_FILL_X, 0,0,0,0, 8,9,2,11, 0,0);
  FXIcon* hdwwizicon = new FXGIFIcon(app, resico_hdwwiz);
  new FXLabel(hdwwizgrp, "", hdwwizicon, JUSTIFY_TOP|LABEL_NORMAL|LAYOUT_SIDE_LEFT|LAYOUT_FIX_HEIGHT, 0,0,0,70,  0,16,0,0);
  new FXLabel(hdwwizgrp, "The Hardware wizard helps you install, uninstall, repair,\n"
                         "unplug, eject, and configure your hardware.", NULL, JUSTIFY_LEFT|LABEL_NORMAL|LAYOUT_SIDE_TOP, 0,0,0,0,  0,0,0,0);


  btn = new FXButton(hdwwizgrp, "&Hardware Wizard...", NULL, this, ID_CHANGEHOSTNAME, BUTTON_DEFAULT|BUTTON_NORMAL|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT|LAYOUT_BOTTOM|LAYOUT_SIDE_RIGHT, 0, 0, 147, 23, 0, 0, 0, 0);  
  btn->disable();


  new FXSeparator(hardwareframe, SEPARATOR_NONE|LAYOUT_FIX_HEIGHT, 0,0,0,5);

  FXGroupBox* devmgmtgrp = new FXGroupBox(hardwareframe, "Device Manager", FRAME_THICK|LAYOUT_FILL_X, 0,0,0,0, 8,9,2,10, 7,0);
  FXIcon* devmgmticon = new FXGIFIcon(app, resico_devmgmt);
  new FXLabel(devmgmtgrp, "", devmgmticon, JUSTIFY_TOP|LABEL_NORMAL|LAYOUT_SIDE_LEFT|LAYOUT_FIX_HEIGHT, 0,0,0,76,  0,9,1,0);
  /* new FXLabel(devmgmtgrp, "The Device Manager lists all the hardware devices installed\n"
                          "on your computer. Use the Device Manager to change the\n"
                          "properties of any device.", NULL, JUSTIFY_LEFT|LABEL_NORMAL|LAYOUT_SIDE_TOP, 0,0,0,0,  0,0,0,0); */
  new FXLabel(devmgmtgrp, "The Device Manager lists all the hardware devices installed", NULL, JUSTIFY_LEFT|LABEL_NORMAL|LAYOUT_SIDE_TOP, 0,0,0,0,  0,0,0,-1);
  new FXLabel(devmgmtgrp, "on your computer. Use the Device Manager to change the", NULL, JUSTIFY_LEFT|LABEL_NORMAL|LAYOUT_SIDE_TOP, 0,0,0,0,  0,0,0,-1);
  new FXLabel(devmgmtgrp, "properties of any device.", NULL, JUSTIFY_LEFT|LABEL_NORMAL|LAYOUT_SIDE_TOP, 0,0,0,0,  0,0,0,0);

  btn = new FXButton(devmgmtgrp, "&Device Manager...", NULL, this, ID_CHANGEHOSTNAME, BUTTON_DEFAULT|BUTTON_NORMAL|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT|LAYOUT_BOTTOM|LAYOUT_SIDE_RIGHT, 0, 0, 147, 23, 0, 0, 0, 0);  
  btn->disable();
  btn = new FXButton(devmgmtgrp, "Driver &Signing...", NULL, this, ID_CHANGEHOSTNAME, BUTTON_DEFAULT|BUTTON_NORMAL|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT|LAYOUT_BOTTOM|LAYOUT_SIDE_RIGHT, 0, 0, 147, 23, 0, 0, 0, 0);  
  btn->disable();


  new FXSeparator(hardwareframe, SEPARATOR_NONE|LAYOUT_FIX_HEIGHT, 0,0,0,6);



  FXGroupBox* hwprofgrp = new FXGroupBox(hardwareframe, "Hardware Wizard", FRAME_THICK|LAYOUT_FILL_X, 0,0,0,0, 8,9,2,10, 0,0);
  FXIcon* hwproficon = new FXGIFIcon(app, resico_hwprof);
  new FXLabel(hwprofgrp, "", hwproficon, JUSTIFY_TOP|LABEL_NORMAL|LAYOUT_SIDE_LEFT|LAYOUT_FIX_HEIGHT, 0,0,0,71,  0,16,0,0);
  new FXLabel(hwprofgrp, "Hardware profiles provide a way for you to set up and store,\n"
                         "different hardware configurations.", NULL, JUSTIFY_LEFT|LABEL_NORMAL|LAYOUT_SIDE_TOP, 0,0,0,0,  0,0,0,0);


  btn = new FXButton(hwprofgrp, "Hardware &Profiles...", NULL, this, ID_CHANGEHOSTNAME, BUTTON_DEFAULT|BUTTON_NORMAL|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT|LAYOUT_BOTTOM|LAYOUT_SIDE_RIGHT, 0, 0, 147, 23, 0, 0, 0, 0);  
  btn->disable();


  new FXTabItem(tabbook,"User Profiles",NULL,TAB_TOP_NORMAL,0,0,0,0,4,4,1,3);
  userframe = new FXVerticalFrame(tabbook,FRAME_THICK|FRAME_RAISED,0,0,0,0,  14,13,18,10, 0,0); 

  FXIcon* userproficon = new FXGIFIcon(app, resico_userprof);
  FXPacker* infocont = new FXPacker(userframe,FRAME_NONE,0,0,0,0,  0,0,0,25, 26,-1);
  new FXLabel(infocont, "", userproficon, JUSTIFY_TOP|LABEL_NORMAL|LAYOUT_SIDE_LEFT, 0,0,0,0,  0,0,0,0);
  new FXLabel(infocont, "User profiles contain desktop settings and other information", NULL, JUSTIFY_TOP|LABEL_NORMAL|LAYOUT_SIDE_TOP, 0,0,0,0,  0,0,0,0);
  new FXLabel(infocont, "related to your logon.  A different profile can be created on", NULL, JUSTIFY_TOP|LABEL_NORMAL|LAYOUT_SIDE_TOP, 0,0,0,0,  0,0,0,0);
  new FXLabel(infocont, "each computer you use, or you can select a roaming profile", NULL, JUSTIFY_TOP|LABEL_NORMAL|LAYOUT_SIDE_TOP, 0,0,0,0,  0,0,0,0);
  new FXLabel(infocont, "that is the same on every computer you use.", NULL, JUSTIFY_TOP|LABEL_NORMAL|LAYOUT_SIDE_TOP, 0,0,0,0,  0,0,0,0);

  new FXLabel(userframe, "&Profiles stored on this computer:", NULL, JUSTIFY_TOP|LABEL_NORMAL|LAYOUT_SIDE_TOP, 0,0,0,0,  0,0,0,4);

  FXPacker* tablecont = new FXPacker(userframe,LAYOUT_FILL_X|LAYOUT_FILL_Y,0,0,0,0,  0,1,0,0, 0,0);  
  FXPacker* tablecont2 = new FXPacker(tablecont,LAYOUT_FILL_X|LAYOUT_FILL_Y|FRAME_THICK|FRAME_SUNKEN,0,0,0,0,  0,0,0,0, 0,0);  
  FXTable* table=new FXTable(tablecont2,NULL,NULL,TABLE_READONLY|LAYOUT_FILL_X|LAYOUT_FILL_Y,0,0,0,0, 2,2,2,2);

  FXFont* deffont = getApp()->getNormalFont();
  
  int res = getApp()->reg().readUnsignedEntry("SETTINGS","screenres",100); // since we cant get the actual font size, we have to calculate it ourselves

  float fontpxf = (float)deffont->getSize() / (float)10 * (float)res / (float)72;
  int fontpx = roundf(fontpxf);

  table->setCellBorderWidth(0);
  table->setRowHeaderWidth(0);
  table->setTableSize(0, 3);
  table->showHorzGrid(FALSE);
  table->showVertGrid(FALSE);
 
  struct passwd *user;

  unsigned int nobodyuid = getpwnam("nobody")->pw_uid;
  // https://stackoverflow.com/questions/14970938/print-out-all-users-of-a-machine-in-c
  int users = 0;

  table->setColumnText(0, "Name");
  table->setColumnText(1, "UID");
  table->setColumnText(2, "Type");	

  table->setDefRowHeight(fontpx + 3);

  table->setMarginLeft(4);


  char passwdname[LOGIN_NAME_MAX+1];
  char uidstr[6]; // 16 bit integer = 5 characters + 1 for null byte

  while ( (user = getpwent() )) {
    if ( (user->pw_uid >= 1000 || user->pw_uid == 0 ) && !(user->pw_uid == nobodyuid)) {
      //printf("name: %d: %s\n", user->pw_uid, user->pw_name);
      table->insertRows(users,1);
	sprintf(passwdname, "%s\\%s", hostnameup, user->pw_name);
	table->setItemJustify(users, 0, FXTableItem::LEFT);
	table->setItemText(users, 0, passwdname);

	sprintf(uidstr, "%d", user->pw_uid);
	table->setItemText(users, 1, uidstr);

	table->setItemJustify(users, 2, FXTableItem::LEFT);
	table->setItemText(users, 2, "Local");
      users++;

    }
  }

  table->setColumnWidth(0, 215);
  table->setColumnWidth(1, 50);
  table->setColumnWidth(2, 75);

  //FXHorizontalFrame* renamecont = new FXHorizontalFrame(userframe, LAYOUT_FILL_X, 0,0,0,0, 0,0,0,0,  17,16);
  FXMatrix* botbuttons = new FXMatrix(userframe, 3, LAYOUT_FILL_COLUMN|LAYOUT_FILL_X|MATRIX_BY_COLUMNS|PACK_UNIFORM_WIDTH|PACK_UNIFORM_HEIGHT, 0,0,0,0,  0,0,9,0,  12,0);
  //botbuttons->setBackColor(FXRGB(255,0,0));


  btn = new FXButton(botbuttons, "&Delete", NULL, NULL, 0, BUTTON_DEFAULT|BUTTON_NORMAL|LAYOUT_FIX_HEIGHT|LAYOUT_FILL_COLUMN|LAYOUT_FILL_X,         0,0,0,21, 0,0,0,0);
  btn->disable();
  btn = new FXButton(botbuttons, "&Change Type...", NULL, NULL, 0, BUTTON_DEFAULT|BUTTON_NORMAL|LAYOUT_FIX_HEIGHT|LAYOUT_FILL_COLUMN|LAYOUT_FILL_X, 0,0,0,21, 0,0,0,0);  
  btn->disable();
  btn = new FXButton(botbuttons, "Copy &To...", NULL, NULL, 0, BUTTON_DEFAULT|BUTTON_NORMAL|LAYOUT_FIX_HEIGHT|LAYOUT_FILL_COLUMN|LAYOUT_FILL_X,     0,0,0,21, 0,0,0,0);  
  btn->disable();
 

  new FXTabItem(tabbook,"Advanced",NULL,TAB_TOP_NORMAL,0,0,0,0,4,4,1,3);
  advframe = new FXVerticalFrame(tabbook,FRAME_THICK|FRAME_RAISED, 0,0,0,0, 13,12,19,8, 0,0); 

  FXGroupBox* performgrp = new FXGroupBox(advframe, "Performance", FRAME_THICK|LAYOUT_FILL_X, 0,0,0,0, 8,9,2,11, 0,0);
  FXIcon* performicon = new FXGIFIcon(app, resico_perform);
  new FXLabel(performgrp, "", performicon, JUSTIFY_TOP|LABEL_NORMAL|LAYOUT_SIDE_LEFT|LAYOUT_FIX_HEIGHT, 0,0,0,70,  0,16,0,0);
  new FXLabel(performgrp, "Performance options control how applications use memory,\n"
                          "which affects the speed of your computer.", NULL, JUSTIFY_LEFT|LABEL_NORMAL|LAYOUT_SIDE_TOP, 0,0,0,0,  0,0,0,0);


  btn = new FXButton(performgrp, "&Performance Options...", NULL, NULL, 0, BUTTON_DEFAULT|BUTTON_NORMAL|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT|LAYOUT_BOTTOM|LAYOUT_SIDE_RIGHT, 0, 0, 147, 23, 0, 0, 0, 0);  
  btn->disable();


  new FXSeparator(advframe, SEPARATOR_NONE|LAYOUT_FIX_HEIGHT, 0,0,0,5);

  FXGroupBox* envvarsgrp = new FXGroupBox(advframe, "Environment Variables", FRAME_THICK|LAYOUT_FILL_X, 0,0,0,0, 8,9,2,10, 7,0);
  FXIcon* envvarsicon = new FXGIFIcon(app, resico_envvars);
  new FXLabel(envvarsgrp, "", envvarsicon, JUSTIFY_TOP|LABEL_NORMAL|LAYOUT_SIDE_LEFT|LAYOUT_FIX_HEIGHT, 0,0,0,71,  0,9,1,0);
  /* new FXLabel(devmgmtgrp, "The Device Manager lists all the hardware devices installed\n"
                          "on your computer. Use the Device Manager to change the\n"
                          "properties of any device.", NULL, JUSTIFY_LEFT|LABEL_NORMAL|LAYOUT_SIDE_TOP, 0,0,0,0,  0,0,0,0); */
  new FXLabel(envvarsgrp, "Environment variables tell your computer where to find", NULL, JUSTIFY_LEFT|LABEL_NORMAL|LAYOUT_SIDE_TOP, 0,0,0,0,  0,0,0,-1);
  new FXLabel(envvarsgrp, "certain types of information.", NULL, JUSTIFY_LEFT|LABEL_NORMAL|LAYOUT_SIDE_TOP, 0,0,0,0,  0,0,0,0);

  btn = new FXButton(envvarsgrp, "&Environment Variables...", NULL, this, ID_ENVVARS, BUTTON_DEFAULT|BUTTON_NORMAL|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT|LAYOUT_BOTTOM|LAYOUT_SIDE_RIGHT, 0, 0, 147, 23, 0, 0, 0, 0);  

  new FXSeparator(advframe, SEPARATOR_NONE|LAYOUT_FIX_HEIGHT, 0,0,0,6);



  FXGroupBox* ntldrgrp = new FXGroupBox(advframe, "Startup and Recovery", FRAME_THICK|LAYOUT_FILL_X, 0,0,0,0, 8,9,2,10, 0,0);
  FXIcon* ntldricon = new FXGIFIcon(app, resico_ntldr);
  new FXLabel(ntldrgrp, "", ntldricon, JUSTIFY_TOP|LABEL_NORMAL|LAYOUT_SIDE_LEFT|LAYOUT_FIX_HEIGHT, 0,0,0,76,  0,16,0,0);
  new FXLabel(ntldrgrp, "Startup and recovery options tell your computer how to start\n"
                         "and what to do if an error causes your computer to stop.", NULL, JUSTIFY_LEFT|LABEL_NORMAL|LAYOUT_SIDE_TOP, 0,0,0,0,  0,0,0,0);


  btn = new FXButton(ntldrgrp, "&Startup and Recovery...", NULL, this, ID_NTLDR, BUTTON_DEFAULT|BUTTON_NORMAL|LAYOUT_FIX_WIDTH|LAYOUT_FIX_HEIGHT|LAYOUT_BOTTOM|LAYOUT_SIDE_RIGHT, 0, 0, 147, 23, 0, 0, 0, 0);  

  getApp()->addTimeout(this,SystemPropertiesWindow::ID_SETFOCUS_T,10);

}


int main(int argc,char *argv[]) {
  FXApp application("sysdm", "Ice2KProj");
  //FXApp* ptrapp = &application;

  application.init(argc,argv);
  sysdmwin = new SystemPropertiesWindow(&application);

  // create windows
  application.create();
  sysdmwin->killFocus();

  sysdmwin->show(PLACEMENT_OWNER);
  sysdmwin->killFocus();

  sysdmwin->changeFocus((FXWindow*)0);

  //sysdmwin->changeFocus(sysdmwin);


  //sysdmwin->show(PLACEMENT_SCREEN);

  // Run the application
  return application.run();
}

